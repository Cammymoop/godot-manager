using Godot;
using Godot.Collections;
using System.Data.SQLite;

public class SQLiteDatabase {
	public delegate void CreateDatabase();

	public CreateDatabase OnCreateDatabase;

	private SQLiteConnection conn;
	private SQLiteCommand command;
	private SQLiteDataReader reader;
	private Array<SQLiteTransaction> transactions;
	public string Location;
	private bool failIfMissing;

	public SQLiteDatabase(string location) {
		Location = location;
		failIfMissing = new File().FileExists(Location);
		string connString = $"Data Source={Location}; Version=3; FailIfMissing={failIfMissing}; Foreign Keys=True";
		conn = new SQLiteConnection(connString);

	}

	~SQLiteDatabase() {
		conn.Close();
	}

	public void Open() {
		if (failIfMissing) {
			try {
				conn.Open();
				OnCreateDatabase();
			} catch(SQLiteException e) {
				GD.Print(e.ToString());
				conn.Close();
			}
		} else {
			conn.Open();
		}
	}

	private string GetDebuggerDisplay()
	{
		return ToString();
	}

	public SQLiteTransaction BeginTransaction() {
		SQLiteTransaction trans = conn.BeginTransaction();
		transactions.Add(trans);
		return trans;
	}

	public void EndTransaction(SQLiteTransaction trans) {
		trans.Commit();
		transactions.Remove(trans);
	}

	public void Execute(string statement, Dictionary<string, object> values) {
		command = conn.CreateCommand();
		command.CommandText = statement;
		foreach (var kv in values.Keys) {
			command.Parameters.AddWithValue((string)kv, values[kv]);
		}
		command.Prepare();
		
		command.ExecuteNonQuery();
	}

	public void Execute(string statement) {
		command = conn.CreateCommand();
		command.CommandText = statement;

		command.ExecuteNonQuery();
	}

	public Array<Dictionary<string, object>> Query(string statement, Dictionary<string, object> values) {
		command = conn.CreateCommand();
		command.CommandText = statement;

		foreach (var kv in values.Keys) {
			command.Parameters.AddWithValue((string)kv, values[kv]);
		}
		command.Prepare();

		reader = command.ExecuteReader();

		Array<Dictionary<string, object>> rvalues = new Array<Dictionary<string, object>>();

		if (reader.HasRows) {
			while (reader.Read()) {
				Dictionary<string, object> ret = new Dictionary<string, object>();
				for (int i = 0; i < reader.FieldCount; i++) {
					ret[reader.GetName(i)] = reader.GetValue(i);
				}
				rvalues.Add(ret);
			}
		} else {
			return null;
		}
		return rvalues;
	}

	public Array<Dictionary<string, object>> Query(string statement) {
		command = conn.CreateCommand();
		command.CommandText = statement;

		reader = command.ExecuteReader();

		Array<Dictionary<string, object>> rvalues = new Array<Dictionary<string, object>>();

		if (reader.HasRows) {
			while (reader.Read()) {
				Dictionary<string, object> ret = new Dictionary<string, object>();
				for (int i = 0; i < reader.FieldCount; i++) {
					ret[reader.GetName(i)] = reader.GetValue(i);
				}
				rvalues.Add(ret);
			}
		} else {
			return null;
		}
		return rvalues;
	}

	public Dictionary<string, object> QueryOne(string statement, Dictionary<string, object> values) {
		Dictionary<string, object> ret = new Dictionary<string, object>();
		command = conn.CreateCommand();
		command.CommandText = statement;

		foreach (var kv in values.Keys) {
			command.Parameters.AddWithValue((string)kv, values[kv]);
		}
		command.Prepare();

		reader = command.ExecuteReader();
		
		if (reader.HasRows) {
			reader.Read();
			for (int i = 0; i < reader.FieldCount; i++) {
				ret[reader.GetName(i)] = reader.GetValue(i);
			}
		} else {
			return null;
		}

		return ret;
	}

	private void TemporaryCreateDatabase() {
		string projects_sql = @"CREATE TABLE Projects (
			Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE,
			Name TEXT NOT NULL,
			Location TEXT NOT NULL,
			GodotVersionId INTEGER NOT NULL DEFAULT '0' REFERENCES GodotVersions (Id) ON DELETE RESTRICT ON UPDATE RESTRICT,
			CategoryId INTEGER NOT NULL DEFAULT '0' REFERENCES Categories (Id) ON DELETE RESTRICT ON UPDATE RESTRICT,
			Favorite INTEGER NOT NULL DEFAULT '0');";
		string godot_sql = @"CREATE TABLE GodotVersions (
			Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE,
			Tag TEXT NOT NULL,
			Location TEXT NOT NULL,
			DownloadedFrom TEXT NOT NULL,
			DownloadedDate TEXT NOT NULL,
			HideConsole INTEGER NOT NULL DEFAULT '1');";
		string categories_sql = @"CREATE TABLE Categories (
			Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE,
			Name TEXT NOT NULL UNIQUE);";
		
		var cmd = conn.CreateCommand();
		cmd.CommandText = godot_sql;
		GD.Print(cmd.ExecuteNonQuery());
		cmd.CommandText = categories_sql;
		GD.Print(cmd.ExecuteNonQuery());
		cmd.CommandText = projects_sql;
		GD.Print(cmd.ExecuteNonQuery());
	}
}